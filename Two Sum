TWO SUM:

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]

 

Constraints:

    2 <= nums.length <= 104
    -109 <= nums[i] <= 109
    -109 <= target <= 109
    Only one valid answer exists.
----------------------------------------------------------------
Brute Force Solution:
Tc = O(n^2)
Sc = O(1)

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for x in range(len(nums)):
            for y in range(x+1,len(nums)):
                if nums[x]+nums[y]==target:
                    return [x,y]
                else:
                    continue
----------------------------------------------------------------
Sorted Array Solution:
Tc = O(n)
Sc = O(1)

def pair_sum_sorted_array(numbers, target):
    i=0
    j=len(numbers)-1
    while i<j:
        if numbers[i]+numbers[j]==target:
            return [i,j]
        elif numbers[i]+numbers[j]>target:
            j-=1
        elif numbers[i]+numbers[j]<target:
            i+=1
        else:
            continue
    return [-1,-1]
-----------------------------------------------------------------
Sorted Array Solution:
Tc=O(n)
Sc=O(n)
    dic={}
    dic1={}
    for i,n in enumerate(numbers):
        dic1[n]=i
        if n in dic:
            dic[n]+=1
        else:
            dic[n]=1
    for i in range(len(numbers)):
        if (target-numbers[i]) in dic:
            if i!=dic1[target-numbers[i]]:
                return [i,dic1[target-numbers[i]]]
        else:
            continue
    return[-1,-1]

---------------------------------------------------------------
Tc=O(n)
Sc=O(n)
    dic1={}
    for i,n in enumerate(numbers):
        dic1[n]=i

    for i,n in enumerate(numbers):
        if (target-n) in dic1 and i!=dic1[target-n]:
            return [i,dic1[target-n]]
    return[-1,-1]

